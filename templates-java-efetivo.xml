<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="Cria o método clone" enabled="true" name="vClone">
	/*
	 * Lembre de implementar Cloneable
	 * 
	 * Sua classe é imutável? Se sim, não faz sentido ter um método clone
	 * 
	 * Sua classe tem atributos primitivos ou Objetos imutáveis? Fique tranquilo, vai funcionar
	 * 
	 * Sua classe tem objetos mutáveis? Será necessário mais código abaixo, Leia o livro e relembre.
	 * 
	 * Retorno: 
	 * - Não pode ser null
	 * - this.clone().getClass() == this.getClass()
	 * - this.clone().equals(this) (Não é obrigatório, mas é muito indicado)
	 *
	 * Sugestões para evitar método clone: 
	 * - Construtor de cópia: new ${class_name} (${class_name} obj);
	 * - static factory: ${class_name}.newInstance(${class_name} obj);
	 */
	@Override
	public ${class_name} clone() {
		try {
			return (${class_name}) super.clone();
		} catch (CloneNotSupportedException e) {
			throw new AssertionError("Erro ao clonar", e);
		}
	}</template><template autoinsert="true" context="java" deleted="false" description="Cria o método compareTo" enabled="true" name="vCompareTo">/*
	 * Implemente a classe Comparable
	 * 
	 * É indicado para objetos que têm uma ordem Natural.
	 * 
	 * Não tem ordem natural? Talvez seja melhor utilizar um Comparator
	 * 
	 * Regras:
	 * sgn(x.compareTo(y)) == -sgn(y.compareTo(x))
	 * x.compareTo(y) &gt; 0 &amp;&amp; y.compareTo(z) &gt; 0? Então x.compareTo(z) &gt; 0
	 * x.compareTo(y) == 0? Então sgn(x.compareTo(z)) == sgn(y.compareTo(z))
	 * x.compareTo(y) == 0? Então x.equals(y). (RECOMENDADO, não obrigatório)
	 * 
	 * Vai comparatar tipos primitivos, utilize o método compare, ex: Integer.compare(numero1, other.numero1);
	 * 
	 * Retorno:
	 * -1 se this for menor
	 * 0 se forem iguais
	 * +1 se this for maior
	 *
	 */
	@Override
	public int compareTo(${class_name} other) {
		//atributo1 implements Comparable
		int result = ${atributo1}.compareTo(other.${atributo1});
		if (result == 0) {
			//atributo2 é int
			result = Integer.compare(${atributo2}, other.${atributo2});
		}
		return result;
	}</template><template autoinsert="true" context="java" deleted="false" description="Cria um método equals" enabled="true" name="vEqualsHashcode">/*
 * Propriedades deste método:
 * 1. Reflexivo
 * 2. Simétrico
 * 3. Transitivo
 * 4. Consistente
 * 5. other == null? return false
 *
 * Todas as propriedades do método equals devem estar no método hashCode.
 *
 * Existe herança? A classe Pai implementou equals? Será que composição não faria mais sentido?
 *
 * Considere gerar equals e hashCode utilizando o atalho: "alt + shift + s, h"
 */
@Override
public boolean equals(Object obj) {
	// Está preocupado com performance? Leia o livro novamente
	if (!(obj instanceof ${class_name})) {
		return false;
	}
	${class_name} other = (${class_name}) obj;

	return Objects.equals(atributo1, other.atributo1) &amp;&amp; Objects.equals(atributo2, other.atributo2);
}

/*
 * Todas as propriedades do método hashCode devem estar no método equals.
 *
 * É uma classe imutável? Considere ter uma propriedade final do hashCode.
 */
@Override
public int hashCode() {
	// Está preocupado com performance? Leia o livro novamente
	return Objects.hash(atributo1, atributo2);
}</template><template autoinsert="true" context="java" deleted="false" description="Cria uma classe utilizando Builder" enabled="true" name="vNewBuilder">${package_declaration}

public class ${class_name} ${line_selection}${cursor} {

	// Atalho para gerar os gets: "alt + shift + s, r"
	private final ${Tipo1} ${nome1};
	private final ${Tipo2} ${nome2};

	public static class Builder {
	
		private ${Tipo1} ${nome1};
		private ${Tipo2} ${nome2};


		public Builder() {
		}

		public Builder ${nome1}(${Tipo1} ${nome1}) {
			this.${nome1} = ${nome1};
			return this;
		}

		public Builder ${nome2}(${Tipo2} ${nome2}) {
			this.${nome2} = ${nome2};
			return this;
		}

		public ${class_name} build() {
			return new ${class_name}(this);
		}
	}

	private ${class_name}(Builder builder) {
		this.${nome1} = builder.${nome1};
		this.${nome2} = builder.${nome2};
	}


}</template><template autoinsert="true" context="java" deleted="false" description="Cria uma classe utilizando static factory" enabled="true" name="vNewClass">${package_declaration}

public class ${class_name} ${line_selection}${cursor} {


	// Atalho para gerar os gets: "alt + shift + s, r"
	private final ${Tipo1} ${nome1};

	private final ${Tipo2} ${nome2};

	private ${class_name}(${Tipo1} ${nome1}, ${Tipo2} ${nome2}) {
		this.${nome1} = ${nome1};
		this.${nome2} = ${nome2};
	}

	public static ${class_name} of(${Tipo1} ${nome1}, ${Tipo2} ${nome2}) {
		return new ${class_name}(${nome1}, ${nome2});
	}


}</template><template autoinsert="true" context="java" deleted="false" description="Cria um Singleton" enabled="true" name="vNewSingleton">${package_declaration}

public class ${class_name} ${line_selection}${cursor} {

	public static final ${class_name} INSTANCE = new ${class_name}();


	private ${class_name}() {

	}



}</template><template autoinsert="true" context="java" deleted="false" description="Cria um singleton utilizando um Enum" enabled="true" name="vNewSingletonEnum">${package_declaration}

public enum ${class_name} ${line_selection}${cursor} {

	INSTANCE;

}</template><template autoinsert="true" context="java" deleted="false" description="Cria um toString" enabled="true" name="vToString">/*
 * Deve ter atributos pertinentes do Objeto. Tem um método equals? Os atributos de lá são um bom Norte.
 * 
 * Atalho do eclipse: "alt + shift + s, s"
 * 
 * O retorno do toString segue um padrão bem definido do formato? ex: (61) 91111-1234? 
 * Cuidado, tome cuidado se futuramente tiver que alterar!
 * Crie um método public static ${class_name} valueOf(String value)
 * 
 *
 *
 */
@Override
public String toString() {
	// Leia os comentários acima
	return "${class_name} [atributo1=" + atributo1 + ", atributo2=" + atributo2 + "]";
}</template></templates>